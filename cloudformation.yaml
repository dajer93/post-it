AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Post-it application with EC2, DynamoDB, and S3'

Parameters:
  EnvironmentName:
    Description: Environment name that is prefixed to resource names
    Type: String
    Default: Post-it
  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid EC2 instance type.
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  
  SSHLocation:
    Description: The IP address range that can SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0f34c5ae932e6f0e4
    us-east-2:
      AMI: ami-02a89066c48741345
    us-west-1:
      AMI: ami-09e595a8b92f09f89
    us-west-2:
      AMI: ami-0735c191cf914754d
    eu-west-1:
      AMI: ami-0eb11ab33f229b26c
    eu-central-1:
      AMI: ami-0faab6bdbac9486fb
    ap-northeast-1:
      AMI: ami-0e725d9b5f9363b0a
    ap-southeast-1:
      AMI: ami-0b8b85d9645465073
    ap-southeast-2:
      AMI: ami-0a1a6462fdc8dee9c

Resources:
  # VPC and Networking
  PostItVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref PostItVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PostItVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PostItVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Security Groups
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS and SSH
      VpcId: !Ref PostItVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  # IAM Role for EC2
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PostIt-Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PostIt-Messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserMessages
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # S3 Bucket for Profile Images
  ProfileImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-profile-images-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  # EC2 Instance
  AppServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref ServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Redirect output to log file for debugging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          echo "Starting server initialization..."

          # Update with latest packages - using apt for Ubuntu
          echo "Updating packages..."
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update

          # Install Node.js from NodeSource repository (for newer versions)
          echo "Installing Node.js..."
          sudo apt-get install -y ca-certificates curl gnupg
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Verify node and npm are installed
          node --version
          npm --version

          # Install git
          echo "Installing git..."
          sudo apt-get install -y git

          # Install MongoDB properly for Ubuntu
          echo "Installing MongoDB..."
          sudo apt-get install -y gnupg
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org

          # Start MongoDB
          echo "Starting MongoDB..."
          sudo systemctl start mongod || echo "Failed to start MongoDB"
          sudo systemctl enable mongod || echo "Failed to enable MongoDB"
          
          # Verify MongoDB is running
          sudo systemctl status mongod

          # Install Nginx
          echo "Installing Nginx..."
          sudo apt-get install -y nginx
          
          # Verify Nginx is installed
          nginx -v

          # Install PM2
          echo "Installing PM2..."
          sudo npm install -g pm2
          
          # Verify PM2 is installed
          pm2 --version

          # Create app directory with correct permissions
          echo "Setting up application directory..."
          sudo mkdir -p /app
          sudo chown ubuntu:ubuntu /app
          cd /app

          # Clone the repository
          echo "Cloning repository..."
          git clone https://github.com/dajer93/post-it.git .

          # Install server dependencies
          echo "Installing server dependencies..."
          cd /app/server
          npm install

          # Configure environment variables
          echo "Configuring environment variables..."
          # Store CloudFormation variables in shell variables first
          STACK_NAME="${AWS::StackName}"
          AWS_REGION_VAR="${AWS::Region}"
          PROFILE_BUCKET_NAME="${ProfileImagesBucket}"
          USERS_TABLE_NAME="${UsersTable}"
          MESSAGES_TABLE_NAME="${MessagesTable}"
          
          # Now use the shell variables in the heredoc
          cat > /app/server/.env << EOF
          PORT=5001
          MONGODB_URI=mongodb://localhost:27017/postit
          JWT_SECRET=$STACK_NAME-jwt-secret
          NODE_ENV=production
          AWS_REGION=$AWS_REGION_VAR
          PROFILE_BUCKET=$PROFILE_BUCKET_NAME
          DYNAMO_USERS_TABLE=$USERS_TABLE_NAME
          DYNAMO_MESSAGES_TABLE=$MESSAGES_TABLE_NAME
          EOF

          # Make sure MongoDB is running before starting the application
          echo "Waiting for MongoDB to be fully started..."
          sleep 10

          # Start the server with PM2
          echo "Starting API server with PM2..."
          cd /app/server
          pm2 start src/index.js --name "postit-server" || echo "Failed to start with PM2"
          pm2 startup | sudo bash || echo "PM2 startup failed"
          pm2 save || echo "PM2 save failed"

          # Configure Nginx as reverse proxy
          echo "Configuring Nginx..."
          sudo tee /etc/nginx/sites-available/postit > /dev/null << 'NGINXEOF'
          server {
            listen 80;
            server_name _;

            location / {
              proxy_pass http://localhost:5001;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
            }
          }
          NGINXEOF

          # Create sites-enabled directory if it doesn't exist
          sudo mkdir -p /etc/nginx/sites-enabled/

          # Enable the Nginx site and restart
          echo "Enabling Nginx site..."
          sudo ln -sf /etc/nginx/sites-available/postit /etc/nginx/sites-enabled/ || echo "Failed to create symlink"
          
          # Remove default site if it exists
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test Nginx configuration
          sudo nginx -t
          
          # Restart Nginx
          sudo systemctl restart nginx || echo "Failed to restart Nginx"
          sudo systemctl enable nginx || echo "Failed to enable Nginx"

          echo "Server initialization completed! Check services status:"
          systemctl status mongod --no-pager
          systemctl status nginx --no-pager
          pm2 status

Outputs:
  ServerPublicIP:
    Description: Public IP address of the server
    Value: !GetAtt AppServer.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-ServerIP"

  ServerPublicDNS:
    Description: Public DNS name of the server
    Value: !GetAtt AppServer.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-ServerDNS"

  UsersTableArn:
    Description: ARN of the Users DynamoDB table
    Value: !GetAtt UsersTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableArn"

  MessagesTableArn:
    Description: ARN of the Messages DynamoDB table
    Value: !GetAtt MessagesTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-MessagesTableArn"

  ProfileImagesBucketName:
    Description: Name of the S3 bucket for profile images
    Value: !Ref ProfileImagesBucket
    Export:
      Name: !Sub "${AWS::StackName}-ProfileImagesBucket" 